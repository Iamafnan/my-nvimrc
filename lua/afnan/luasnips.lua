local ls = require("luasnip")
local loader = require("luasnip.loaders.from_vscode").load

function LuaSnipLoad()
	loader({
		path = "~/.local/share/nvim/site/pack/packer/opt/friendly-snippets/snippets/",
	})

	loader({
		path = "~/.local/share/nvim/site/pack/packer/opt/abusaidm.html-snippets-0.0.18/snippets/",
	})
end

vim.cmd("command! LuaSnipLoad :lua LuaSnipLoad()")

ls.config.setup({
	history = true,
	updateevents = "InsertLeave",
	ft_func = function()
		return vim.split(vim.bo.filetype, ".", true)
	end,
})

local s = ls.parser.parse_snippet

ls.snippets = {
	lua = {
		s("l", "local $1 \n$0"),
		s("ll", "local $1 = $2\n$0"),
		s("lreq", 'local $1 = require("$2")\n$0'),
		s("req", 'require("$1")\n$0'),
		s("u", 'use({ "$1" , $0 })'),
		s("cl", "local $1 = {}\n $0 \n return $1"),
		s("rt", "return $1 \n$0"),
		s("p", 'print("$1") \n$0'),
		s("s", 's("$1", "$2"),\n$0'),
	},
	markdown = {
		s("h1", "<h1 $1 >$2</h1>$0"),
		s("h2", "<h2 $1 >$2</h2>$0"),
		s("h3", "<h3 $1 >$2</h3>$0"),
		s("h4", "<h4 $1 >$2</h4>$0"),
		s("img", "![$1]($2)$0"),
		s("link", "[$1]($2)$0"),
		s("code", "```$1\n$2\n```$0"),
	},
	css = {
		s("as", [[align-items: ${1|flex-start,flex-end,center,baseline,stretch,auto|};]]),
		s("ls", [[letter-spacing: ${0:2px};]]),
		s(
			"dis",
			[[display: ${1|none,block,inline,inline-block,flex,inline-flex,list-item,table,inline-table,table-caption,table-cell,table-row,table-row-group,table-column|};]]
		),
		s("ws", [[white-space: ${1|nowrap,pre,pre-wrap,pre-line,normal|};]]),
		s("fst", [[font-style: ${1|italic,oblique,normal|};]]),
		s("jcfs", [[justify-content: flex-start;]]),
		s("jcfe", [[justify-content: flex-end;]]),
		s("jcc", [[justify-content: center;]]),
		s(
			"ani",
			[[animation: ${1:name} ${2:1s} ${3|linear,ease-in-out,ease,ease-in,ease-out,step-start,step-end,steps,cubic-bezier|};]]
		),
		s("jcsb", [[justify-content: space-between;]]),
		s("marr", [[margin-right: ${0:0};]]),
		s("mart", [[margin-top: ${0:0};]]),
		s("bgrx", [[background-repeat: repeat-x;]]),
		s("bgry", [[background-repeat: repeat-y;]]),
		s("bgrn", [[background-repeat: no-repeat;]]),
		s("fw", [[font-weight: ${0:bold};]]),
		s("born", [[border: none;]]),
		s("mih", [[min-height: ${0:1px};]]),
		s("miw", [[min-width: ${0:1px};]]),
		s("boz", [[box-sizing: ${1|border-box,content-box|};]]),
		s("listd", [[list-style-type: disc;]]),
		s("mah", [[max-height: ${0:1px};]]),
		s("listn", [[list-style-type: none;]]),
		s("lists", [[list-style-type: square;]]),
		s("maw", [[max-width: ${0:1px};]]),
		s("bgc", [[background-color: ${0:#fff};]]),
		s("listur", [[list-style-type: upper-roman;]]),
		s("opa", [[opacity: ${0:0};]]),
		s("ft", [[font: ${0:12px/1.5};]]),
		s("bgcl", [[background-clip: ${1|border-box,padding-box,content-box,text|};]]),
		s("anidi", [[animation-direction: ${1|alternate,alternate-reverse,reverse,normal|};]]),
		s("lsn", [[letter-spacing: normal;]]),
		s("mara", [[margin: 0 auto;]]),
		s("bg", [[background: ${0:#fff};]]),
		s("bgi", [[background-image: url('${0:background.jpg}');]]),
		s("anidu", [[animation-duration: ${0:1s};]]),
		s("ova", [[overflow: auto;]]),
		s("ovh", [[overflow: hidden;]]),
		s("jc", [[justify-content: ${1|flex-start,flex-end,center,space-between,space-around|};]]),
		s("ovs", [[overflow: scroll;]]),
		s("ovv", [[overflow: visible;]]),
		s("aniic", [[animation-iteration-count: ${0:infinite};]]),
		s("posa", [[position: absolute;]]),
		s("posf", [[position: fixed;]]),
		s("padb", [[padding-bottom: ${0:0};]]),
		s("posr", [[position: relative;]]),
		s("poss", [[position: sticky;]]),
		s("padl", [[padding-left: ${0:0};]]),
		s("anin", [[animation-name: ${0:name};]]),
		s("tac", [[text-align: center;]]),
		s("tal", [[text-align: left;]]),
		s("tar", [[text-align: right;]]),
		s("tdu", [[text-decoration: underline;]]),
		s("tdn", [[text-decoration: none;]]),
		s(
			"anitf",
			[[animation-timing-function: ${1|linear,ease,ease-in-out,ease-in,ease-out,step-start,step-end,steps,cubic-bezier|};]]
		),
		s("tdl", [[text-decoration: line-through;]]),
		s("pad", [[padding: ${0:0};]]),
		s("fl", [[float: ${1|left,right,none|};]]),
		s("vam", [[vertical-align: middle;]]),
		s("flex", [[flex: ${1:1} ${2:1} ${3:auto};]]),
		s("mar", [[margin: ${0:0};]]),
		s("pos", [[position: ${1|relative,absolute,fixed,sticky,static|};]]),
		s("bot", [[bottom: ${0:0};]]),
		s("bgs", [[background-size: ${0:cover};]]),
		s("wida", [[width: auto;]]),
		s("wsn", [[white-space: nowrap;]]),
		s("wsp", [[white-space: pre;]]),
		s("col", [[color: ${0:#000};]]),
		s("ta", [[text-align: ${1|center,left,right,justify,start,end|};]]),
		s("imp", [[@import '${0:filename}';]]),
		s(
			"mix",
			[[@mixin ${1:name} {
  $0
}]]
		),
		s("inc", [[@include ${0:mixin};]]),
		s(
			"key",
			[[@keyframes ${1:name} {
  $0
}]]
		),
		s(
			"med",
			[[@media screen and (${1:max-width: 300px}) {
  $0
}]]
		),
		s("!", [[!important]]),
		s("i", [[!important]]),
		s(
			"bor",
			[[border: ${1:1px} ${2|solid,dashed,dotted,double,groove,ridge,inset,outset,none,hidden|} ${0:#000};]]
		),
		s("vis", [[visibility: ${1|visible,hidden,collapse|};]]),
		s("td", [[text-decoration: ${1|none,underline,overline,line-through|};]]),
		s(
			"lis",
			[[list-style: ${1|disc,circle,square,decimal,lower-roman,upper-roman,lower-alpha,upper-alpha,none,armenian,cjk-ideographic,georgian,lower-greek,hebrew,hiragana,hiragana-iroha,katakana,katakana-iroha,lower-latin,upper-latin|} ${2|outside,inside|};]]
		),
		s("borc", [[border-color: ${0:#000};]]),
		s("bors", [[border-style: ${1|solid,dashed,dotted,double,groove,ridge,inset,outset,none,hidden|};]]),
		s("ti", [[text-indent: ${0:2em};]]),
		s("top", [[top: ${0:0};]]),
		s("fld", [[flex-direction: ${1|row,row-reverse,column,column-reverse|};]]),
		s("borw", [[border-width: ${0:1px};]]),
		s("ts", [[text-shadow: ${1:1px} ${2:1px} ${3:1px} ${4:1px} ${0:rgba(0, 0, 0, .5)};]]),
		s("zi", [[z-index: ${0:-1};]]),
		s("ww", [[word-wrap: ${1|break-word,break-spaces,normal|};]]),
		s(
			"borb",
			[[border-bottom: ${1:1px} ${2|solid,dashed,dotted,double,groove,ridge,inset,outset,none,hidden|} ${0:#000};]]
		),
		s("wid", [[width: ${0:0};]]),
		s("wb", [[word-break: ${1|break-all,keep-all,break-word,normal|};]]),
		s(
			"borl",
			[[border-left: ${1:1px} ${2|solid,dashed,dotted,double,groove,ridge,inset,outset,none,hidden|} ${0:#000};]]
		),
		s("vish", [[visibility: hidden;]]),
		s("visv", [[visibility: visible;]]),
		s(
			"borr",
			[[border-right: ${1:1px} ${2|solid,dashed,dotted,double,groove,ridge,inset,outset,none,hidden|} ${0:#000};]]
		),
		s("vat", [[vertical-align: top;]]),
		s("vab", [[vertical-align: bottom;]]),
		s("va", [[vertical-align: ${1|baseline,middle,top,bottom,sub,super,text-top,text-bottom|};]]),
		s(
			"bort",
			[[border-top: ${1:1px} ${2|solid,dashed,dotted,double,groove,ridge,inset,outset,none,hidden|} ${0:#000};]]
		),
		s("tt", [[text-transform: ${1|capitalize,uppercase,lowercase,full-width,none|};]]),
		s("fz", [[font-size: ${0:12px};]]),
		s("br", [[border-radius: ${0:2px};]]),
		s("ais", [[align-items: stretch;]]),
		s("ai", [[align-items: ${1|flex-start,flex-end,center,baseline,stretch,start,end,self-start,self-end|};]]),
		s("flf", [[flex-flow: ${1|row,row-reverse,column,column-reverse|} ${2|wrap,wrap-reverse,nowrap|};]]),
		s("curp", [[cursor: pointer;]]),
		s("marb", [[margin-bottom: ${0:0};]]),
		s("curd", [[cursor: default;]]),
		s("aifs", [[align-items: flex-start;]]),
		s("aic", [[align-items: center;]]),
		s("lisp", [[${1|outside,inside|}]]),
		s("bos", [[box-shadow: ${1:1px} ${2:1px} ${3:1px} ${4:1px} ${0:rgba(0, 0, 0, .5)};]]),
		s("disi", [[display: inline-block;]]),
		s("bga", [[background-attachment: ${1|fixed,scroll,local|};]]),
		s("disn", [[display: none;]]),
		s("aib", [[align-items: baseline;]]),
		s("disf", [[display: flex;]]),
		s("bgp", [[background-position: ${1:left} ${2:top};]]),
		s("clr", [[clear: ${1|both,left,right,none|};]]),
		s("flw", [[flex-wrap: ${1|wrap,wrap-reverse,nowrap|};]]),
		s("fle", [[flex: ${1:1} ${2:1} ${3:auto};]]),
		s("aife", [[align-items: flex-end;]]),
		s("anide", [[animation-delay: ${0:1s};]]),
		s("lef", [[left: ${0:0};]]),
		s("rig", [[right: ${0:0};]]),
		s("fldc", [[flex-direction: column;]]),
		s("disb", [[display: block;]]),
		s("listc", [[list-style-type: circle;]]),
		s("bgrr", [[background-repeat: repeat;]]),
		s("listlr", [[list-style-type: lower-roman;]]),
		s("marl", [[margin-left: ${0:0};]]),
		s("anips", [[animation-play-state: ${1|paused,running|};]]),
		s("fll", [[float: left;]]),
		s(
			"cur",
			[[cursor: ${1|auto,default,alias,cell,copy,crosshair,context-menu,help,grab,grabbing,move,none,no-drop,not-allowed,pointer,progress,e-resize,all-scroll,text,wait,vertical-text,zoom-in,zoom-out|};]]
		),
		s("flr", [[float: right;]]),
		s("fwb", [[font-weight: bold;]]),
		s("fln", [[float: none;]]),
		s("fldr", [[flex-direction: row;]]),
		s("hei", [[height: ${0:1px};]]),
		s("padr", [[padding-right: ${0:0};]]),
		s("bgr", [[background-repeat: ${1|no-repeat,repeat-x,repeat-y,repeat,space,round|};]]),
		s("jcsa", [[justify-content: space-around;]]),
		s("fsti", [[font-style: italic;]]),
		s("bgo", [[background-origin: ${1|border-box,padding-box,content-box|};]]),
		s("fstn", [[font-style: normal;]]),
		s("anifm", [[animation-fill-mode: ${1|forwards,backwards,both,none|};]]),
		s("fsto", [[font-style: oblique;]]),
		s("lh", [[line-height: ${0:1.5};]]),
		s("ff", [[font-family: ${0:arial};]]),
		s("con", [[content: '$0';]]),
		s(
			"list",
			[[list-style-type: ${1|disc,circle,square,decimal,lower-roman,upper-roman,lower-alpha,upper-alpha,none,armenian,cjk-ideographic,georgian,lower-greek,hebrew,hiragana,hiragana-iroha,katakana,katakana-iroha,lower-latin,upper-latin|};]]
		),
		s("ov", [[overflow: ${1|visible,hidden,scroll,auto,clip|};]]),
		s("fwl", [[font-weight: light;]]),
		s("padt", [[padding-top: ${0:0};]]),
		s("fwn", [[font-weight: normal;]]),
	},
	html = {
		s(" doctype ", [[ ['<!DOCTYPE>', '$1'] ]]),
		s(" a ", [[ <a href="$1">$2</a>$3 ]]),
		s(" abbr ", [[ <abbr title="$1">$2</abbr>$3 ]]),
		s(" address ", [[ ['<address>', '$1', '</address>'] ]]),
		s(" area ", [[ <area shape="$1" coords="$2" href="$3" alt="$4">$5 ]]),
		s(" article ", [[ ['<article>', '\t$1', '</article>'] ]]),
		s(" aside ", [[ ['<aside>', '\t$1', '</aside>$2'] ]]),
		s(" audio ", [[ ['<audio controls>', '\t$1', '</audio>'] ]]),
		s(" b ", [[ <b>$1</b>$2 ]]),
		s(" base ", [[ <base href="$1" target="$2">$3 ]]),
		s(" bdi ", [[ <bdi>$1</bdi>$2 ]]),
		s(" bdo ", [[ ['<bdo dir="$1">', '$2', '</bdo>'] ]]),
		s(" big ", [[ <big>$1</big>$2 ]]),
		s(" blockquote ", [[ ['<blockquote cite="$2">', '\t$1', '</blockquote>'] ]]),
		s(" body ", [[ ['<body>', '\t$1', '</body>'] ]]),
		s(" br ", [[ <br> ]]),
		s(" button ", [[ <button type="$1">$2</button>$3 ]]),
		s(" canvas ", [[ <canvas id="$1">$2</canvas>$3 ]]),
		s(" caption ", [[ <caption>$1</caption>$2 ]]),
		s(" cite ", [[ <cite>$1</cite>$2 ]]),
		s(" code ", [[ <code>$1</code>$2 ]]),
		s(" col ", [[ <col>$2 ]]),
		s(" colgroup ", [[ ['<colgroup>', '\t$1', '</colgroup>'] ]]),
		s(" command ", [[ <command>$1</command>$2 ]]),
		s(" datalist ", [[ ['<datalist>', '\t$1', '</datalist>'] ]]),
		s(" dd ", [[ <dd>$1</dd>$2 ]]),
		s(" del ", [[ <del>$1</del>$2 ]]),
		s(" details ", [[ ['<details>', '\t$1', '</details>'] ]]),
		s(" dialog ", [[ <dialog>$1</dialog>$2 ]]),
		s(" dfn ", [[ <dfn>$1</dfn>$2 ]]),
		s(" div ", [[ ['<div>', '\t$1', '</div>'] ]]),
		s(" dl ", [[ ['<dl>', '\t$1', '</dl>'] ]]),
		s(" dt ", [[ <dt>$1</dt>$2 ]]),
		s(" em ", [[ <em>$1</em>$2 ]]),
		s(" embed ", [[ <embed src="$1">$2 ]]),
		s(" fieldset ", [[ ['<fieldset>', '\t$1', '</fieldset>'] ]]),
		s(" figcaption ", [[ <figcaption>$1</figcaption>$2 ]]),
		s(" figure ", [[ ['<figure>', '\t$1', '</figure>'] ]]),
		s(" footer ", [[ ['<footer>', '\t$1', '</footer>'] ]]),
		s(" form ", [[ ['<form>', '\t$1', '</form>'] ]]),
		s(" h1 ", [[ <h1>$1</h1>$2 ]]),
		s(" h2 ", [[ <h2>$1</h2>$2 ]]),
		s(" h3 ", [[ <h3>$1</h3>$2 ]]),
		s(" h4 ", [[ <h4>$1</h4>$2 ]]),
		s(" h5 ", [[ <h5>$1</h5>$2 ]]),
		s(" h6 ", [[ <h6>$1</h6>$2 ]]),
		s(" head ", [[ ['<head>', '\t$1', '</head>'] ]]),
		s(" header ", [[ ['<header>', '\t$1', '</header>'] ]]),
		s(" hgroup ", [[ ['<hgroup>', '\t$1', '</hgroup>'] ]]),
		s(" hr ", [[ <hr> ]]),
		s(" html ", [[ ['<html>', '\t$1', '</html>'] ]]),
		s(
			" html5 ",
			[[ ['<!DOCTYPE html>', '<html lang="$1en">', '\t<head>', '\t\t<title>$2</title>', '\t\t<meta charset="UTF-8">', '\t\t<meta name="viewport" content="width=device-width, initial-scale=1">', '\t\t<link href="$3css/style.css" rel="stylesheet">', '\t</head>', '\t<body>', '\t$4', '\t</body>', '</html>'] ]]
		),
		s(" i ", [[ <i>$1</i>$2 ]]),
		s(" iframe ", [[ <iframe src="$1">$2</iframe>$3 ]]),
		s(" img ", [[ <img src="$1" alt="$2">$3 ]]),
		s(" input ", [[ <input type="$1" name="$2" value="$3">$4 ]]),
		s(" ins ", [[ <ins>$1</ins>$2 ]]),
		s(" keygen ", [[ <keygen name="$1">$2 ]]),
		s(" kbd ", [[ <kbd>$1</kbd>$2 ]]),
		s(" label ", [[ <label for="$1">$2</label>$3 ]]),
		s(" legend ", [[ <legend>$1</legend>$2 ]]),
		s(" li ", [[ <li>$1</li>$2 ]]),
		s(" link ", [[ <link rel="$1" type="$2" href="$3">$4 ]]),
		s(" main ", [[ ['<main>', '\t$1', '</main>'] ]]),
		s(" map ", [[ ['<map name="$1">', '\t$2', '</map>'] ]]),
		s(" mark ", [[ <mark>$1</mark>$2 ]]),
		s(" menu ", [[ ['<menu>', '\t$1', '</menu>'] ]]),
		s(" menuitem ", [[ <menuitem>$1</menuitem>$2 ]]),
		s(" meta ", [[ <meta name="$1" content="$2">$3 ]]),
		s(" meter ", [[ <meter value="$1">$2</meter>$3 ]]),
		s(" nav ", [[ ['<nav>', '\t$1', '</nav>'] ]]),
		s(" noscript ", [[ ['<noscript>', '$1', '</noscript>'] ]]),
		s(" object ", [[ <object width="$1" height="$2" data="$3">$4</object>$5 ]]),
		s(" ol ", [[ ['<ol>', '\t$1', '</ol>'] ]]),
		s(" optgroup ", [[ ['<optgroup>', '\t$1', '</optgroup>'] ]]),
		s(" option ", [[ <option value="$1">$2</option>$3 ]]),
		s(" output ", [[ <output name="$1" for="$2">$3</output>$4 ]]),
		s(" p ", [[ <p>$1</p>$2 ]]),
		s(" param ", [[ <param name="$1" value="$2">$3 ]]),
		s(" pre ", [[ ['<pre>', '$1', '</pre>'] ]]),
		s(" progress ", [[ <progress value="$1" max="$2">$3</progress>$4 ]]),
		s(" q ", [[ <q>$1</q>$2 ]]),
		s(" rp ", [[ <rp>$1</rp>$2 ]]),
		s(" rt ", [[ <rt>$1</rt>$2 ]]),
		s(" ruby ", [[ ['<ruby>', '$1', '</ruby>'] ]]),
		s(" s ", [[ <s>$1</s>$2 ]]),
		s(" samp ", [[ <samp>$1</samp>$2 ]]),
		s(" script ", [[ ['<script>', '\t$1', '</script>'] ]]),
		s(" section ", [[ ['<section>', '\t$1', '</section>'] ]]),
		s(" select ", [[ ['<select>', '\t$1', '</select>'] ]]),
		s(" small ", [[ <small>$1</small>$2 ]]),
		s(" source ", [[ <source src="$1" type="$2">$3 ]]),
		s(" span ", [[ <span>$1</span>$2 ]]),
		s(" strong ", [[ <strong>$1</strong>$2 ]]),
		s(" style ", [[ ['<style>', '$1', '</style>'] ]]),
		s(" sub ", [[ <sub>$1</sub>$2 ]]),
		s(" sup ", [[ <sup>$1</sup>$2 ]]),
		s(" summary ", [[ <summary>$1</summary>$2 ]]),
		s(" table ", [[ ['<table>', '\t$1', '</table>'] ]]),
		s(" tbody ", [[ ['<tbody>', '\t$1', '</tbody>'] ]]),
		s(" td ", [[ <td>$1</td>$2 ]]),
		s(" textarea ", [[ <textarea rows="$1" cols="$2">$3</textarea>$4 ]]),
		s(" tfoot ", [[ ['<tfoot>', '\t$1', '</tfoot>'] ]]),
		s(" thead ", [[ ['<thead>', '$1', '</thead>'] ]]),
		s(" th ", [[ <th>$1</th>$2 ]]),
		s(" time ", [[ <time datetime="$1">$2</time>$3 ]]),
		s(" title ", [[ <title>$1</title>$2 ]]),
		s(" tr ", [[ <tr>$1</tr>$2 ]]),
		s(" track ", [[ <track src="$1" kind="$2" srclang="$3" label="$4">$5 ]]),
		s(" u ", [[ <u>$1</u>$2 ]]),
		s(" ul ", [[ ['<ul>', '\t$1', '</ul>'] ]]),
		s(" var ", [[ <var>$1</var>$2 ]]),
		s(" video ", [[ ['<video width="$1" height="$2" controls>', '\t$3', '</video>'] ]]),
	},
	javascript = {
		s("sim", "setImmediate(() => {\n\t${0}\n})"),
		s("a", "await ${0}"),
		s("apa", "await Promise.all(${1:value})"),
		s("apad", "const [${0}] = await Promise.all(${1:value})"),
		s("apm", "await Promise.all(${1:array}.map(async (${2:value}) => {\n\t${0}\n}))"),
		s("ast", "await new Promise((r) => setTimeout(r, ${0}))"),
		s("cb", "function (err, ${1:value}) {\n\tif (err) throw err\n\t${0}\n}"),
		s("pe", "process.env"),
		s("pa", "Promise.all(${1:value})"),
		s("prs", "Promise.resolve(${1:value})"),
		s("prj", "Promise.reject(${1:value})"),
		s("p", "Promise"),
		s("np", "new Promise((resolve, reject) => {\n\t${0}\n})"),
		s("pt", "${1:promise}.then((${2:value}) => {\n\t${0}\n})"),
		s("pc", "${1:promise}.catch(error => {\n\t${0}\n})"),
		s("desc", "describe('${1:description}', () => {\n\t${0}\n})"),
		s("dt", "describe('${TM_FILENAME_BASE}', () => {\n\t${0}\n})"),
		s("it", "it('${1:description}', async () => {\n\t${0}\n})"),
		s("itt", "it.todo('${1:description}')"),
		s("itd", "it('${1:description}', (done) => {\n\t${0}\n})"),
		s("its", "it('${1:description}', () => {\n\t${0}\n})"),
		s("bf", "before(async () => {\n\t${0}\n})"),
		s("ba", "beforeAll(async () => {\n\t${0}\n})"),
		s("bfe", "beforeEach(async () => {\n\t${0}\n})"),
		s("aft", "after(() => {\n\t${0}\n})"),
		s("afe", "afterEach(() => {\n\t${0}\n})"),
		s("rq", "require('${1:module}')"),
		s("cr", "const ${1:module} = require('${1:module}')"),
		s("em", "exports.${1:member} = ${2:value}"),
		s("me", "module.exports = ${1:name}"),
		s(
			"mec",
			"class ${1:name} {\n\tconstructor (${2:arguments}) {\n\t\t${0}\n\t}\n}\n\nmodule.exports = ${1:name}\n"
		),
		s("on", "${1:emitter}.on('${2:event}', (${3:arguments}) => {\n\t${0}\n})"),
		s("evc", "ev.preventDefault()\nev.stopPropagation()\nreturn false"),
		s("ae", "${1:document}.addEventListener('${2:event}', ${3:ev} => {\n\t${0}\n})"),
		s("rel", "${1:document}.removeEventListener('${2:event}', ${3:listener})"),
		s("gi", "${1:document}.getElementById('${2:id}')"),
		s("gc", "Array.from(${1:document}.getElementsByClassName('${2:class}'))"),
		s("gt", "Array.from(${1:document}.getElementsByTagName('${2:tag}'))"),
		s("qs", "${1:document}.querySelector('${2:selector}')"),
		s("qsa", "Array.from(${1:document}.querySelectorAll('${2:selector}'))"),
		s("cdf", "${1:document}.createDocumentFragment(${2:elem})"),
		s("cel", "${1:document}.createElement(${2:elem})"),
		s("hecla", "${1:el}.classList.add('${2:class}')"),
		s("heclr", "${1:el}.classList.remove('${2:class}')"),
		s("hect", "${1:el}.classList.toggle('${2:class}')"),
		s("hega", "${1:el}.getAttribute('${2:attr}')"),
		s("hera", "${1:el}.removeAttribute('${2:attr}')"),
		s("hesa", "${1:el}.setAttribute('${2:attr}', ${3:value})"),
		s("heac", "${1:el}.appendChild(${2:elem})"),
		s("herc", "${1:el}.removeChild(${2:elem})"),
		s("fe", "${1:iterable}.forEach((${2:item}) => {\n\t${0}\n})"),
		s("map", "${1:iterable}.map((${2:item}) => {\n\t${0}\n})"),
		s("reduce", "${1:iterable}.reduce((${2:previous}, ${3:current}) => {\n\t${0}\n}${4:, initial})"),
		s("filter", "${1:iterable}.filter((${2:item}) => {\n\t${0}\n})"),
		s("find", "${1:iterable}.find((${2:item}) => {\n\t${0}\n})"),
		s("every", "${1:iterable}.every((${2:item}) => {\n\t${0}\n})"),
		s("some", "${1:iterable}.some((${2:item}) => {\n\t${0}\n})"),
		s("v", "var ${1:name}"),
		s("va", "var ${1:name} = ${2:value}"),
		s("l", "let ${1:name}"),
		s("c", "const ${1:name}"),
		s("cd", "const { ${2:prop} } = ${1:value}"),
		s("cad", "const [ ${2:prop} ] = ${1:value}"),
		s("ca", "const ${1:name} = await ${2:value}"),
		s("cda", "const { ${1:name} } = await ${2:value}"),
		s("cf", "const ${1:name} = (${2:arguments}) => {\n\treturn ${0}\n}"),
		s("la", "let ${1:name} = await ${2:value}"),
		s("cy", "const ${1:name} = yield ${2:value}"),
		s("ly", "let ${1:name} = yield ${2:value}"),
		s("co", "const ${1:name} = {\n\t${0}\n}"),
		s("car", "const ${1:name} = [\n\t${0}\n]"),
		s("gari", "Array.from({ length: ${1:length} }, (v, k) => k + 1)"),
		s("gari0", "[...Array(${1:length}).keys()]"),
		s("cs", "class ${1:name} {\n\tconstructor (${2:arguments}) {\n\t\t${0}\n\t}\n}"),
		s(
			"csx",
			"class ${1:name} extends ${2:base} {\n\tconstructor (${3:arguments}) {\n\t\tsuper(${3:arguments})\n\t\t${0}\n\t}\n}"
		),
		s("e", "export ${1:member}"),
		s("ec", "export const ${1:member} = ${2:value}"),
		s("ef", "export function ${1:member} (${2:arguments}) {\n\t${0}\n}"),
		s("ed", "export default ${1:member}"),
		s("edf", "export default function ${1:name} (${2:arguments}) {\n\t${0}\n}"),
		s("im", "import ${2:*} from '${1:module}'"),
		s("ia", "import ${2:*} as ${3:name} from '${1:module}'"),
		s("id", "import {$2} from '${1:module}'"),
		s("to", "typeof ${1:source} === '${2:undefined}'"),
		s("t", "this."),
		s("iof", "${1:source} instanceof ${2:Object}"),
		s("lif", "let ${0} \n if (${2:condition}) {\n\t${1}\n}"),
		s("el", "else {\n\t${0}\n}"),
		s("ei", "else if (${1:condition}) {\n\t${0}\n}"),
		s("wid", "let ${1:array}Index = ${1:array}.length\nwhile (${1:array}Index--) {\n\t${0}\n}"),
		s("tn", "throw new ${0:error}"),
		s("tc", "try {\n\t${0}\n} catch (${1:err}) {\n\t\n}"),
		s("tf", "try {\n\t${0}\n} finally {\n\t\n}"),
		s("tcf", "try {\n\t${0}\n} catch (${1:err}) {\n\t\n} finally {\n\t\n}"),
		s("fan", "function (${1:arguments}) {${0}}"),
		s("fn", "function ${1:name} (${2:arguments}) {\n\t${0}\n}"),
		s("asf", "async function (${1:arguments}) {\n\t${0}\n}"),
		s("aa", "async (${1:arguments}) => {\n\t${0}\n}"),
		s("iife", ";(function (${1:arguments}) {\n\t${0}\n})(${2})"),
		s("aiife", ";(async (${1:arguments}) => {\n\t${0}\n})(${2})"),
		s("af", "(${1:arguments}) => ${2:statement}"),
		s("fd", "({${1:arguments}}) => ${2:statement}"),
		s("fdr", "({${1:arguments}}) => ${1:arguments}"),
		s("f", "(${1:arguments}) => {\n\t${0}\n}"),
		s("fr", "(${1:arguments}) => {\n\treturn ${0}\n}"),
		s("gf", "function* (${1:arguments}) {\n\t${0}\n}"),
		s("gfn", "function* ${1:name}(${2:arguments}) {\n\t${0}\n}"),
		s("cl", "console.log(${0})"),
		s("cv", "console.log('${0}:', ${0})"),
		s("ce", "console.error(${0})"),
		s("cw", "console.warn(${0})"),
		s("cod", "console.dir('${0}:', ${0})"),
		s("cn", "constructor () {\n\t${0}\n}"),
		s("uss", "'use strict'"),
		s("js", "JSON.stringify($0)"),
		s("jp", "JSON.parse($0)"),
		s("m", "${1:method} (${2:arguments}) {\n\t${0}\n}"),
		s("get", "get ${1:property} () {\n\t${0}\n}"),
		s("set", "set ${1:property} (${2:value}) {\n\t${0}\n}"),
		s("gs", "get ${1:property} () {\n\t${0}\n}\nset ${1:property} (${2:value}) {\n\t\n}"),
		s("proto", "${1:Class}.prototype.${2:method} = function (${3:arguments}) {\n\t${0}\n}"),
		s("oa", "Object.assign(${1:dest}, ${2:source})"),
		s("oc", "Object.create(${1:obj})"),
		s("og", "Object.getOwnPropertyDescriptor(${1:obj}, '${2:prop}')"),
		s("te", "${1:cond} ? ${2:true} : ${3:false}"),
		s("ta", "const ${0} = ${1:cond} ? ${2:true} : ${3:false}"),
		s("od", "Object.defineProperty(${1:dest}, '${2:prop}', {\n\t${0}\n})"),
		s("ok", "Object.keys(${1:obj})"),
		s("ov", "Object.values(${1:obj})"),
		s("oe", "Object.entries(${1:obj})"),
		s("r", "return ${0}"),
		s("rf", "return (${1:arguments}) => ${2:statement}"),
		s("y", "yield ${0}"),
		s("rt", "return ${0:this}"),
		s("rn", "return null"),
		s("ro", "return {\n\t${0}\n}"),
		s("ra", "return [\n\t${0}\n]"),
		s("rp", "return new Promise((resolve, reject) => {\n\t${0}\n})"),
		s("wrap selection in arrow function", "() => {\n\t{$TM_SELECTED_TEXT}\n}"),
		s("wrap selection in async arrow function", "async () => {\n\t{$TM_SELECTED_TEXT}\n}"),
	},
}
